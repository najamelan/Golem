# This is the default configuration file for Golem.
#
# DO NOT CHANGE THIS FILE
#
# Rather, make a copy of it and keep just the values you want to change from the defaults, and then pass the
# filename of your own configuration file to the constructor of Golem. Your values will override the values
# in this file.
#
Golem:

   # The encoding of this and other configuration files. You probably want to leave this on utf-8
   # and make sure it's actually utf-8. If really there is a reason utf-8 would not be a good idea,
   # file an issue on github so we can all learn something, otherwise stick with it!
   #
   configEncoding: 'UTF-8'


String:

   # The default encoding for strings throughout Golem. You can instantiate Golem\Data\String objects
   # with other encodings, or convert existing strings, but whenever you don't specify, golem will assume it's
   # this encoding. Recommended: utf-8.
   #
   encoding  : &globalEncoding 'UTF-8'

   # When invalid encoding is detected, which replacement string to use. This should be something understood by
   # mb_substitute_character()
   #
   substitute: 0xfffd  # �


Logger:

   # Allows to disable logging (not recommended):
   #
   loggingOn:  true

   # Allows to disable exceptions (not recommended):
   #
   throwingOn: true

   # Where to log info/warnings/errors from golem. Values (can be an array of multiple):
   #
   # 'phplog'       : the default php error log
   # '/var/log/...' : a file path where to log
   # 'echo'         : echo errors
   #
   logfile: phplog

   # If you specify a logfile and the directory it's in does not exist, Golem will try to create it.
   # This are the permissions for the missing directory and it's parent directories that have to be
   # created.
   #
   logDirPermissions: 0755

   # The default log level, can be 'ALL', 'NOTICE', 'WARNING', 'ERROR', 'OFF'.
   #
   level       : ALL

   # The default name for a logger
   #
   name        : Golem
   prefix      : Golem


Codec:

   HTML5:

      # Immune characters in the context of HTML5 text. (eg. between <p> and </p>)
      # Alphanumeric characters are also immune.
      #
      immuneText     : ',.-_ '

      # Immune characters in the context of HTML5 attributes (eg. <p id="THE TEXT HERE">)
      # Alphanumeric characters are also immune.
      #
      immuneAttribute: ',.-_'

      # Some characters that are valid in character encodings aren't allowed in HTML5.
      # This should be a string used to replace them.
      #
      substitute     : '&#xfffd;'  # �

      # HTML5 Standard specifies that there should be a semicolon at the end of entities,
      # however as long as browsers interprete them when the semicolon is missing, so must we.
      #
      requireEntitySemicolon: false


      # private $_immune_css        = [ ' '     ];
      # private $_immune_sql        = [ ' '     ];
      # private $_immune_vbscript   = [ ' '     ];
      # private $_immune_javascript = [ '_'     ];
      # private $_immune_os         = [ '-'     ];
      # private $_immune_xml        = [ ',.-_ ' ];
      # private $_immune_xmlattr    = [ ',.-_'  ];
      # private $_immune_xpath      = [ ',.-_ ' ];
      # private $_immune_url        = [ '.-*_'  ];


Encoder: []


Validation:

   StringRule:

      # Any php strings passed to the StringRule object will be assumed and sanitized to be of this encoding
      # Any Golem\Data\String objects passed in will be converted to this encoding. It can no longer be
      # changed once any string have been passed to the object.
      # Validated and sanitized strings returned from the StringRule will be in this encoding.
      #
      encoding : *globalEncoding

      # Whether a null value validates
      #
      allowNull: false

      # The default value, certain sanitize routines will use this in case the input is invalid.
      # This value must be conform all the constraints set on the validation, otherwise an exception will be thrown.
      # It usually doesn't make sense to set a default value for this option, but for documentation purposes it's included here.
      # If set, minLength and maxLength will be ignored.
      #
      # defaultValue :

      # A set of values from which the input needs to be one in order to validate (sanitize will return defaultValue on invalid input)
      # It usually doesn't make sense to set a default value for this option, but for documentation purposes it's included here.
      # This value should be an array in the configuration file, but when calling the setter, you can also pass each value as a separate parameter.
      #
      # in: [ 'hi', 'hello' ]

      # The exact length in characters the string should have (sanitize will truncate if the value is to long, and try to use the defaultValue if it's to short).
      # You SHOULDN'T set a default value for this option, but for documentation purposes it's included here.
      # This value should be an integer
      # If set, minLength and maxLength will be ignored.
      #
      # length :

      # The minimum allowed length of the string (sanitation will not try to fix strings that are to short, but will return defaultValue if set, fail if defaultValue is not set)
      # This value should be an integer
      #
      minLength: 0

      # The maximum allowed length of the string (sanitize will crop the string to this length if it's to long).
      # This value should be an integer
      # One special value is allowed in configuration files: 'PHP_INT_MAX' which will be translated to the php constant.
      #
      maxLength: PHP_INT_MAX

      # The type of the variable. The validation rule will return your value as this type. Also if using validation and not
      # sanitation if your input is not of the correct type, it won't be cast, but an exception will be thrown.
      # Possible values are 'Golem\Data\String' or 'string' for native php strings.
      #
      # type:


   NumberRule:

      # The type of the variable. The validation rule will return your value as this type. Also if using validation and not
      # sanitation if your input is not of the correct type, it won't be cast, but an exception will be thrown.
      # Possible values are 'integer', 'float', 'double'.
      #
      # type:
      #
      dummy:
